#!/bin/bash

DOTFILES_DIR="$HOME/dotfiles"

ppas=(
    neovim-ppa/unstable
)

# name|check|utility
utilities=(
    "Add eza repository|.add-eza-repo|add-eza-repo.sh"
)

packages=(
    git
    neovim
    zsh
    curl
    fzf
    ripgrep
    bat
    eza
)

binaries=(
    "https://dystroy.org/broot/download/x86_64-linux/broot"
)

# name|path|command
tools=(
    "Oh My Zsh|$HOME/.oh-my-zsh|sh -c \"\$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\""
    "zsh-autosuggestions|$HOME/.oh-my-zsh/custom/plugins/zsh-autosuggestions|git clone https://github.com/zsh-users/zsh-autosuggestions.git $HOME/.oh-my-zsh/custom/plugins/zsh-autosuggestions"
    "zsh-syntax-highlighting|$HOME/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting|git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $HOME/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting"
    "Node Version Manager|$HOME/.nvm|bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh)\""
    "NvChad for NeoVim|$HOME/.config/nvim|git clone https://github.com/NvChad/starter ~/.config/nvim"
)

# name|command
scripts=(
    "Add GNOME Terminal GitHub-Dark-Dimmed Theme|bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/edurojasr/Gnome-Terminal-GitHub-Theme/main/github-dark-dimmed.sh)\""
    "Use latest Node LTS|source $HOME/.nvm/nvm.sh && nvm install --lts"
    "Set NeoVim as default editor|sudo update-alternatives --set vim /usr/bin/nvim"
)

###################################################
### YOU SHOULD NOT NEED TO EDIT BELOW THIS LINE ###
###################################################

BOLD="\033[1m"
TXT_GRN="\033[92m"
TXT_RED="\033[91m"
BG_GRN="\033[42m"
BG_RED="\033[41m"
RESET="\033[0m"

# Update the local dotfiles repository, if it is a git repository.
#
# If the local dotfiles repository is a git repository, this function pulls the latest
# changes from the remote repository. If it is not a git repository, it will print a message
# indicating that it is not a git repository.
update_dotfiles_repo() {
  if [ -d "$DOTFILES_DIR/.git" ]; then
    echo "Pulling latest changes from the remote repository..."
    git -C "$DOTFILES_DIR" pull
  else
    echo -e "${TXT_RED}Directory $DOTFILES_DIR is not a git repository.${RESET}"
  fi
}

# Check if a package is installed.
#
# $1: The name of the package to check.
#
# Returns 0 if the package is installed, 1 otherwise.
is_installed() {
    dpkg -s "$1" &>/dev/null
    return $?
}

# Run any utilities that need to be ran.
#
# This function goes through each of the utilities specified in the utilities array.
# If the utility has not been ran (i.e., a file at the specified check_path does not
# exist), it runs the utility with the given command. If the utility has already been
# ran, it prints a message indicating that it has already ran.
run_utilities() {
    for utility in "${utilities[@]}"; do
        name=$(echo "$utility" | cut -d'|' -f1)
        check_path=$(echo "$utility" | cut -d'|' -f2)
        install_command=$(echo "$utility" | cut -d'|' -f3)
        if [ ! -f "$check_path" ]; then
            echo -e "${TXT_GRN}Running $name...${RESET}"
            "$DOTFILES_DIR/utilities/$install_command"
        else
            echo -e "${TXT_RED}$name has already ran.${RESET}"
        fi
    done
}

add_ppas() {
    for ppa in "${ppas[@]}"; do
        sudo add-apt-repository -y "ppa:$ppa"
        echo "PPA $ppa has been added."
    done
}

# Install the required packages.
#
# This function updates the package lists and then goes through the list of required
# packages. If a package is not installed, it is installed with `apt`.
install_packages() {
    echo "Updating package lists..."
    sudo apt-get update

    echo "Installing required packages..."
    for pkg in "${packages[@]}"; do
        if is_installed "$pkg"; then
            echo -e "${TXT_RED}$pkg is already installed.${RESET}"
        else
            sudo apt-get install -y "$pkg"
            echo -e "${TXT_GRN}$pkg has been installed.${RESET}"
        fi
    done
}

# Link a file from the source to the target, renaming any existing file at the target location to {target}-bak.
#
# $1: The source file to link
# $2: The target location to link to
link_file() {
    local source_file="$1"
    local target_file="$2"

    if [ -e "$target_file" ]; then
        if [ -L "$target_file" ]; then
            echo -e "${TXT_RED}Removing existing symlink $target_file${RESET}"
            rm "$target_file"
        else
            echo -e "${TXT_RED}Renaming $target_file to ${target_file}-bak${RESET}"
            mv "$target_file" "${target_file}-bak"
        fi
    fi

    ln -sf "$source_file" "$target_file"
    echo -e "${TXT_GRN}Linked $source_file to $target_file${RESET}"
}

# Download any binary files specified in the binaries array and make them executable.
#
# For each binary, if the file does not already exist, it is downloaded with curl, made
# executable with chmod, and a message is printed indicating that it has been downloaded.
# If the file already exists, a message is printed indicating that the binary is already
# downloaded.
download_binaries() {
    mkdir -p "$DOTFILES_DIR/.local/bin"

    for url in "${binaries[@]}"; do
        binary_name=$(basename "$url")
        target_file="$DOTFILES_DIR/.local/bin/$binary_name"

        if [ ! -f "$target_file" ]; then
            echo "Downloading $binary_name..."
            curl -L -o "$target_file" "$url"
            chmod +x "$target_file"
            echo -e "${TXT_GRN}$binary_name has been downloaded and made executable.${RESET}"
        else
            echo -e "${TXT_RED}$binary_name is already downloaded.${RESET}"
        fi
    done
}


# Install the required tools.
#
# This function goes through the list of required tools. If a tool is not installed,
# it is installed with the given command.
install_tools() {
  for tool in "${tools[@]}"; do
    tool_name=$(echo "$tool" | cut -d '|' -f 1)
    check_path=$(echo "$tool" | cut -d '|' -f 2)
    install_command=$(echo "$tool" | cut -d '|' -f 3)

    if [ ! -d "$check_path" ]; then
      echo -e "${TXT_GRN}Installing $tool_name...${RESET}"
      eval "$install_command"
    else
      echo -e "${TXT_RED}$tool_name is already installed.${RESET}"
    fi
  done
}

# Install the required scripts.
#
# This function goes through the list of required scripts. If a script is not installed,
# it is installed with the given command.
install_scripts() {
  for script in "${scripts[@]}"; do
    script_name=$(echo "$script" | cut -d '|' -f 1)
    install_command=$(echo "$script" | cut -d '|' -f 2)

    echo -e "${TXT_GRN}Running $script_name...${RESET}"
    eval "$install_command"
  done
}

# Link all dotfiles to their respective locations in the home directory.
#
# This function goes through each of the root dotfiles, and links them to their
# respective locations in the home directory.
#
# It then goes through each of the configuration directories, and links them to
# their respective locations in the .config directory.
#
# Finally, it goes through each of the binary files, and links them to their
# respective locations in the .local/bin directory.
link_files() {
    echo "Linking root dotfiles..."
    for file in .gitconfig .gitmessage .screenrc .vimrc .zshrc; do
        link_file "$DOTFILES_DIR/$file" "$HOME/$file"
    done

    echo "Linking .local/bin directory..."
    mkdir -p "$HOME/.local/bin"
    for bin_file in "$DOTFILES_DIR/.local/bin/"*; do
        bin_name=$(basename "$bin_file")
        link_file "$bin_file" "$HOME/.local/bin/$bin_name"
    done
}

update_dotfiles_repo
run_utilities
add_ppas
install_packages
install_tools
download_binaries
install_scripts
link_files

echo
echo
echo -e "${BG_GRN}${BOLD}Dotfiles installation complete!${RESET}"
echo "To finish installation:"
echo -e "Run nvim. Run ${BOLD}MasonInstallAll${RESET} command after lazy.nvim finishes downloading plugins."
echo -e "Run broot to install ${BOLD}br${RESET}."